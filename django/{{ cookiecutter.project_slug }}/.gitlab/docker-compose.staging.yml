services:
  migrations:
    build:
      context: ..
      dockerfile: .gitlab/Dockerfile
      target: base
    environment:
      - DJANGO_SETTINGS_MODULE={{ cookiecutter.project_slug }}.settings.staging
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST_AUTH_METHOD
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_HOST={{ cookiecutter.project_slug }}-postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: [ "uv", "run","--no-dev", "--group", "production", "manage.py", "migrate" ]

  app:
    extends:
      service: migrations
    build:
      context: ..
      dockerfile: .gitlab/Dockerfile
      target: app
    restart: unless-stopped
    command: ["uv", "run","--no-dev", "--group", "production", "gunicorn", "-b", ":8000", "--workers=3", "--enable-stdio-inheritance", "{{ cookiecutter.project_slug }}.wsgi:application"]
    expose:
      - 8000
  postgres:
    networks:
      default:
        aliases:
          - {{ cookiecutter.project_slug }}-postgres
    image: postgres:{{ cookiecutter.postgresql_version }}
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-U", "${POSTGRES_USER}" ]
      retries: 3
      timeout: 5s


volumes:
  postgres-data:
